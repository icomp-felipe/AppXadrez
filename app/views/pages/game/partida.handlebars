<div class="container">

    <div id="chess" class="container clearfix">
        <div class="chessboard">
            <div id="board" style="width: 600px"></div>
            <div id="status">A vez é do jogador <b>branco</b>.</div>
        </div>
    </div>

</div>

<script>

    // Inicializa o jogo e configura as variáveis necessárias
    const game    = new Chess();
    var color, partida, board;

    // Instancia o Socket.IO
    const socket  = io();

    // Solicita ao servidor que este recupere um jogo
    socket.emit("recuperar-jogo", {
        user   : {{user}},
        partida: {{partida}}
    });

    // Resposta do servidor à requisição acima inicia o jogo, de fato
    socket.on("jogo-recuperado", (attributes) => {

        color   = attributes.color;
        partida = attributes.partida;

        // fen é a posição das peças no tabuleiro
        game.load(attributes.fen);

        // Inicializando o tabuleiro
        board = Chessboard('board', {
            draggable  : true,
            orientation: (color == 'w') ? 'white' : 'black',
            position   : attributes.fen,
            moveSpeed  : 'slow',
            pieceTheme : '/img/chesspieces/wikipedia/{piece}.png',
            onDragStart: onDragStart,   // quando o usuário pega a peça, para começar seu movimento
            onDrop     : onDrop,       // quando o usuário solta a peça, para encerrar seu movimento
            onSnapEnd  : onSnapEnd    // quando um jogador captura a peça do outro, ou quando o peão chega no topo do campo adversário
        });

        updateStatus();

    });
   

    // Define os movimentos do jogo
    function onDragStart(source, piece, position, orientation) {

        // Não permite o movimento de peças em caso de game over
        if (game.game_over())
            return false;

        // Permite apenas o movimento de peças de sua própria cor
        if ((color === 'w' && piece.search(/^b/) !== -1) ||
            (color === 'b' && piece.search(/^w/) !== -1))
            return false;

        // O jogador só pode mover peças caso seja sua vez de jogar
        if ((game.turn() === 'w' && piece.search(/^b/) !== -1) ||
            (game.turn() === 'b' && piece.search(/^w/) !== -1))
            return false;

    }

    function onDrop(source, target) {

        // Verifica se o movimento feito é coerente de acordo com as regras de xadrez
        var move = game.move({
            from     : source,
            to       : target,
            promotion: 'q'      // NOTA: Para manter a simplicidade, peões só poderão ser promovidos para rainhas
        });

        // Se o movimento for ilegal, retrocede a peça para a posição original
        if (move === null)
            return "snapback";

        // Envia o movimento para o servidor, indicando também, o número da partida
        socket.emit("client-move", {
            partida  : partida,
            fen      : game.fen(),
            from     : source,
            to       : target,
            promotion: 'q'
        });

        updateStatus();
    }

    function onSnapEnd() {
        board.position(game.fen())
    }

    // Atualiza o div de status da página
    function updateStatus() {

        var status    = "";
        var moveColor = "<b>branco</b>";

        // Quando é a vez do jogador preto
        if (game.turn() === 'b')
            moveColor = "<b>preto</b>";

        // Checkmate?
        if (game.in_checkmate())
            status = `É xeque-mate! Vitória do jogador ${moveColor}!`;

        // empate? (draw)
        else if (game.in_draw())
            status = "O jogo empatou!";

        // Aqui o jogo continua
        else {

            status = `A vez é do jogador ${moveColor}.`;

            // Checkmate?
            if (game.in_check())
                status += `, o jogador ${moveColor} está em xeque.`;

        }

        // Atualizando a view
        document.getElementById('status').innerHTML = status;

    }

    // Processa o jogo do adversário, vindo do servidor
    socket.on("server-move", (move) => {

        board.move(move.from + "-" + move.to);
        game .move(move);

        updateStatus();

    });

</script>